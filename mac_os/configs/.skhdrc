#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# ========================
# Window Focus Management
# ========================

# Focus the window in a specific direction
alt - h : yabai -m window --focus west    # Focus window to the left
alt - k : yabai -m window --focus north   # Focus window upwards
alt - j : yabai -m window --focus south   # Focus window downwards
alt - l : yabai -m window --focus east    # Focus window to the right

# ========================
# Window and Space Toggling
# ========================

# Toggle floating for the active window
alt - f : yabai -m window --toggle float

# Toggle between float and bsp layout for the current space
alt + shift - f : yabai -m space --layout $(yabai -m query --spaces --space | jq -r '.type' | grep -q "bsp" && echo float || echo bsp)

# Toggle fullscreen zoom for the current window
alt - z : yabai -m window --toggle zoom-fullscreen

# Toggle horizontal/vertical split for the current window
alt - s : yabai -m window --toggle split

# =====================
# Window Rotation & Warp
# =====================

# Rotate the entire space clockwise by 270 degrees
alt - r : yabai -m space --rotate 270

# Warp (move) the current window to a new position in a specific direction
alt + ctrl - h : yabai -m window --warp west    # Move window to the left
alt + ctrl - j : yabai -m window --warp south   # Move window downwards
alt + ctrl - k : yabai -m window --warp north   # Move window upwards
alt + ctrl - l : yabai -m window --warp east    # Move window to the right

# =====================
# Window Resizing
# =====================

# Resize windows in a direction
# Source: https://github.com/koekeishiya/yabai/issues/200
alt + shift - h : yabai -m window --resize right:-20:0 2> /dev/null || yabai -m window --resize left:-20:0 2> /dev/null   # Resize window to the left
alt + shift - j : yabai -m window --resize bottom:0:20 2> /dev/null || yabai -m window --resize top:0:20 2> /dev/null     # Resize window downwards
alt + shift - k : yabai -m window --resize bottom:0:-20 2> /dev/null || yabai -m window --resize top:0:-20 2> /dev/null   # Resize window upwards
alt + shift - l : yabai -m window --resize right:20:0 2> /dev/null || yabai -m window --resize left:20:0 2> /dev/null     # Resize window to the right

# ============================
# Window Minimizing and Restoring
# ============================

# Minimize the active window and store its ID in a temporary file
alt - m : yabai -m query --windows --window | jq '.id' >> /tmp/minimized_windows && yabai -m window --minimize && NEXT_WINDOW=$(yabai -m query --windows --space | jq -r '.[] | select(."is-minimized" == false) | .id' | head -n 1) && yabai -m window --focus $NEXT_WINDOW

# Unminimize the last minimized window from the stored list
alt + ctrl - m : LAST_WINDOW=$(tail -n 1 /tmp/minimized_windows) && sed -i '' '$d' /tmp/minimized_windows && yabai -m window --focus $LAST_WINDOW && yabai -m window --minimize off

# Minimize all windows in the space
alt + ctrl - d : yabai -m query --windows --space | jq '.[].id' | xargs -I{} yabai -m window {} --minimize

# Unminimize all windows in the space
alt + ctrl - r : yabai -m query --windows --space | jq 'map(select(."is-minimized" == true)) | .[].id' | xargs -I{} yabai -m window {} --focus

# =====================
# Application Launching
# =====================

# Launch a terminal in a single instance
cmd - return : open -na "iTerm"
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# Launch Firefox using a custom script
cmd + shift - return : /bin/zsh -c "\$SCRIPT_PATH/yabai/open_firefox.sh"

# ===========================
# Yabai Service Management
# ===========================

# Start/Stop Yabai using a custom script
alt + ctrl - y : /bin/zsh -c "\$SCRIPT_PATH/yabai/start_stop_yabai.sh"

# Restart both Yabai and SKHD services
alt - y : yabai --restart-service; skhd --restart-service

# ==========================
# Window Stacking
# ==========================

# Stack the current window on top of the next window
alt + ctrl - s : /bin/bash -c 'yabai -m window --stack next || yabai -m space --layout bsp'

# Cycle through stacked windows with wraparound
alt + ctrl - n : yabai -m window --focus stack.next || yabai -m window --focus stack.first   # Focus the next stacked window
alt + ctrl - p : yabai -m window --focus stack.prev || yabai -m window --focus stack.last    # Focus the previous stacked window

# ==============================
# Window Cycling (Wraparound)
# ==============================

# Cycle through all windows with wraparound
alt - n : yabai -m window --focus next || yabai -m window --focus first   # Focus the next window
alt - p : yabai -m window --focus prev || yabai -m window --focus last    # Focus the previous window

cmd - w : if pgrep -x "yabai" > /dev/null; then yabai -m window --close; yabai -m window --focus next || yabai -m window --focus prev || yabai -m window --focus first; else; hs -c "CloseCurrentWindow()"; fi